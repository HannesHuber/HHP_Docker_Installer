### Installation for Mac:

### Step 1: Install Docker
1. **Download Docker for Mac**: Visit [Docker's official website](https://www.docker.com/products/docker-desktop) and download Docker Desktop for Mac.
2. **Install Docker Desktop**: Open the downloaded `.dmg` file and drag the Docker icon to your Applications folder.
3. **Run Docker Desktop**: Open Docker Desktop from your Applications folder. The first launch might take some time as it sets up.

### Step 2: Clone Your Project from GitHub
1. **Install Git** (if not already installed): You can install Git via Homebrew (a package manager for macOS). If Homebrew is not installed, you can install it by pasting `/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"` in the Terminal.
2. **Install Git Using Homebrew**: In the Terminal, run `brew install git`.
3. **Clone Your Repository**: Navigate to the folder where you want your project using `cd path/to/folder` and then run `git clone https://github.com/HannesHuber/HHP.git`.

### Step 3: Running the Application
1. **Navigate to Project Directory**: In the Terminal, change directory to your project folder using `cd path/to/HHP`.
2. **Start Docker Compose**: Run `docker-compose up`. This command reads the `docker-compose.yml` file in your project directory and starts all the services defined in it. If you want to run it in detached mode (in the background), use `docker-compose up -d`.

### Step 4: Accessing the Application and phpMyAdmin
- **Web Application**: Open a web browser and go to `http://localhost`. This should load your web application.
- **phpMyAdmin**: To manage your MySQL database, visit `http

### Step 5: Stopping the Application
- When you're done and want to stop the application, go back to the Terminal, ensure you're in the project directory, and run `docker-compose down`. This command stops and removes the containers, networks, and volumes created by `docker-compose up`.

### Additional Tips
- **Docker Volumes**: Data in your MySQL database is stored in Docker volumes, which persist data even when containers are stopped. This means your database data will remain intact across container restarts unless the volume is explicitly removed.
- **Updating Your Application**: If you make changes to the application code, simply stop the Docker containers (`docker-compose down`), and then start them again (`docker-compose up`) for the changes to take effect.
- **Troubleshooting**: If you encounter issues with Docker, restarting Docker Desktop can often resolve them. For more specific issues, the Docker and Docker Compose documentation can be very helpful.
